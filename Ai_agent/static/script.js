document.addEventListener('DOMContentLoaded', function() {
    function updateDateTime() {
        const dateTimeElem = document.getElementById('current-datetime');
        if (dateTimeElem) {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
            dateTimeElem.textContent = now.toLocaleString('ru-RU', options);
        }
    }
    setInterval(updateDateTime, 1000);
    updateDateTime();
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const fileInput = document.getElementById('file-input');
    const attachButton = document.getElementById('attach-button');
    const todoList = document.getElementById('todo-list');
    const newTodoInput = document.getElementById('new-todo-input');
    const addTodoBtn = document.getElementById('add-todo-btn');
    const sidebar = document.getElementById('sidebar');
    const chatContainer = document.querySelector('.chat-container');
    let chatHistory = [];
    let currentChatId = 'chat-' + Date.now();
    let isEditingTitle = false;
    let isFileDialogOpen = false;
    async function fetchAndRenderTodos() {
        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: '–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏' }),
            });
            const data = await response.json();
            if (data.response) {
                renderTodos(data.response);
            } else if (data.error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', data.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error);
        }
    }
    function renderTodos(todosText) {
        todoList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        const lines = todosText.split('\n');
        if (lines.length <= 1) {
            const emptyItem = document.createElement('li');
            emptyItem.textContent = '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.';
            todoList.appendChild(emptyItem);
            return;
        }
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;
            const match = line.match(/^(\d+)\.\s(‚úÖ|‚è≥)\s(.+)$/);
            if (match) {
                const id = parseInt(match[1]);
                const statusChar = match[2];
                const taskText = match[3];
                const isCompleted = statusChar === '‚úÖ';
                const listItem = document.createElement('li');
                listItem.dataset.id = id;
                if (isCompleted) {
                    listItem.classList.add('completed');
                }
                const todoContentWrapper = document.createElement('div');
                todoContentWrapper.classList.add('todo-content-wrapper');
                const checkbox = document.createElement('div');
                checkbox.classList.add('todo-checkbox');
                checkbox.innerHTML = `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
            
                const taskSpan = document.createElement('span');
                taskSpan.textContent = taskText;
                taskSpan.classList.add('todo-text'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
                todoContentWrapper.appendChild(checkbox);
                todoContentWrapper.appendChild(taskSpan);
                const deleteButton = document.createElement('button');
                deleteButton.classList.add('delete-todo-btn');
                deleteButton.innerHTML = `
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 6h18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                `;
                deleteButton.title = '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É';
                listItem.appendChild(todoContentWrapper);
                listItem.appendChild(deleteButton);
                deleteButton.addEventListener('click', async (e) => {
                    e.stopPropagation(); 
                    const confirmDelete = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${taskText}"?`);
                    if (confirmDelete) {
                        const command = `—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É ${id}`;
                        try {
                            const response = await fetch('/api/chat', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ message: command }),
                            });
                            const data = await response.json();
                            if (data.response) {
                                console.log(`–ó–∞–¥–∞—á–∞ ${id} —É–¥–∞–ª–µ–Ω–∞:`, data.response);
                                fetchAndRenderTodos(); 
                            } else {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', data.error);
                                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: ${data.error}`);
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
                            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.');
                        }
                    }
                });
                listItem.addEventListener('click', async (e) => {
                    e.stopPropagation(); 
                    console.log("CLICK EVENT FIRED for task ID:", id);
                    console.log("Current 'completed' status:", listItem.classList.contains('completed'));
                    const newStatus = !listItem.classList.contains('completed');
                    const command = newStatus 
                        ? `–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É ${id} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π` 
                        : `–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É ${id} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π`;
                    console.log("Command being sent to backend:", command);
                    const updateResponse = await fetch('/api/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: command }),
                    });
                    const updateData = await updateResponse.json();

                    if (updateData.response) {
                        console.log("Task update successful. Re-fetching todos.");
                        fetchAndRenderTodos(); 
                    } else {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', updateData.error);
                    }
                });

                todoList.appendChild(listItem);
            }
        }
    }
    function createNewChat() {
        saveCurrentChat();
        currentChatId = 'chat-' + Date.now();
        localStorage.setItem('activeChatId', currentChatId); 
        chatMessages.innerHTML = `
            <div class="message assistant">
                <div class="message-content">
                        <p><strong>–ü—Ä–∏–≤–µ—Ç! –Ø –î–∂–µ–π–Ω ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.</strong></p>
                    
                    <p>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:</p>
                    <ul style="list-style-type: disc; padding-left: 20px; margin: 10px 0;">
                        <li style="margin-bottom: 5px;">üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏</li>
                        <li style="margin-bottom: 5px;">üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
                        <li style="margin-bottom: 5px;">‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤</li>
                        <li style="margin-bottom: 5px;">üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏</li>
                        <li style="margin-bottom: 5px;">üåê –ü–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</li>
                    </ul>
                    
                    <p>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üìé</p>
                </div>
            </div>
        `;
        chatHistory = [{
            type: 'assistant',
            content: chatMessages.querySelector('.message-content').innerHTML
        }];
        chatMessages.style.opacity = '0';
        setTimeout(() => {
            chatMessages.style.opacity = '1';
        }, 150);
        addChatToSidebar(currentChatId, '–ù–æ–≤—ã–π —á–∞—Ç');
        setActiveChatItem(document.querySelector('.chat-item[data-id="' + currentChatId + '"]'));
        userInput.focus();
    }
    function addChatToSidebar(id, title) {
        const chatHistoryContainer = document.querySelector('.chat-history');
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        chatItem.dataset.id = id;
        chatItem.innerHTML = `
            <div class="chat-item-content">
                <span class="chat-title" title="${title}">${title}</span>
                <div class="chat-actions">
                    <button class="edit-chat" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                    <button class="delete-chat" title="–£–¥–∞–ª–∏—Ç—å">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 6h18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
            </div>
        `;
        
        const chatContent = chatItem.querySelector('.chat-item-content');
        const titleSpan = chatItem.querySelector('.chat-title');
        const editButton = chatItem.querySelector('.edit-chat');
        const deleteButton = chatItem.querySelector('.delete-chat');
        
        chatContent.addEventListener('click', (e) => {
            if (!e.target.closest('.chat-actions') && !isEditingTitle) {
                setActiveChatItem(chatItem);
                loadChat(id);
            }
        });
        editButton.addEventListener('click', (e) => {
            e.stopPropagation();
            editChatTitle(chatItem, titleSpan, id);
        });
        deleteButton.addEventListener('click', async (e) => { // –î–æ–±–∞–≤–ª–µ–Ω async
            e.stopPropagation();
            showDeleteConfirmation(id, chatItem, title);
        });
        chatHistoryContainer.appendChild(chatItem);
        setActiveChatItem(chatItem);
        chatItem.style.opacity = '0';
        chatItem.style.transform = 'translateX(-20px)';
        setTimeout(() => {
            chatItem.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            chatItem.style.opacity = '1';
            chatItem.style.transform = 'translateX(0)';
        }, 50);
    }
    function editChatTitle(chatItem, titleSpan, chatId) {
        if (isEditingTitle) return;
        isEditingTitle = true;
        const currentTitle = titleSpan.textContent;
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentTitle;
        input.className = 'chat-title-input';
        input.maxLength = 50;
        titleSpan.style.display = 'none';
        titleSpan.parentNode.insertBefore(input, titleSpan);
        input.focus();
        input.select();
        function finishEditing(save = true) {
            if (!isEditingTitle) return;
            isEditingTitle = false;
            const newTitle = save ? input.value.trim() || currentTitle : currentTitle;
            titleSpan.textContent = newTitle;
            titleSpan.title = newTitle;
            titleSpan.style.display = '';
            if (input.parentNode) {
                input.parentNode.removeChild(input);
            }
            if (save && newTitle !== currentTitle) {
                saveChatTitle(chatId, newTitle);
            }
        }
        input.addEventListener('blur', () => finishEditing(true));
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                finishEditing(true);
            } else if (e.key === 'Escape') {
                e.preventDefault();
                finishEditing(false);
            }
        });
    }
    function saveChatTitle(chatId, title) {
        // –¢–µ–ø–µ—Ä—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–∞—Ç–æ–≤ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ localStorage, –∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        const chatData = localStorage.getItem(chatId);
        if (chatData) {
            try {
                const data = JSON.parse(chatData);
                data.title = title;
                localStorage.setItem(chatId, JSON.stringify(data));
            } catch (e) {–π
                const messages = JSON.parse(chatData);
                const newData = {
                    title: title,
                    messages: messages, // –°–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    createdAt: Date.now()
                };
                localStorage.setItem(chatId, JSON.stringify(newData));
            }
        } else {
            const newData = {
                title: title,
                messages: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –ë–î
                createdAt: Date.now()
            };
            localStorage.setItem(chatId, JSON.stringify(newData));
        }
    }
    function showDeleteConfirmation(chatId, chatItem, title) {
        const modal = document.createElement('div');
        modal.className = 'delete-modal';
        modal.innerHTML = `
            <div class="delete-modal-content">
                <h3>–£–¥–∞–ª–∏—Ç—å —á–∞—Ç?</h3>
                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç "${title}"?<br>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
                <div class="delete-modal-actions">
                    <button class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                    <button class="confirm-delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        const cancelBtn = modal.querySelector('.cancel-btn');
        const confirmBtn = modal.querySelector('.confirm-delete-btn');
        
        cancelBtn.addEventListener('click', () => {
            closeModal(modal);
        });
        confirmBtn.addEventListener('click', async () => { // –î–æ–±–∞–≤–ª–µ–Ω async
            await deleteChat(chatId, chatItem); // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            closeModal(modal);
        });
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal);
            }
        });
        const escapeHandler = (e) => {
            if (e.key === 'Escape') {
                closeModal(modal);
                document.removeEventListener('keydown', escapeHandler);
            }
        };
        document.addEventListener('keydown', escapeHandler);
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
    }
    function closeModal(modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 200);
    }
    function setActiveChatItem(activeItem) {
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active');
    });
        activeItem.classList.add('active');
        if (activeItem && activeItem.dataset && activeItem.dataset.id) {
            localStorage.setItem('activeChatId', activeItem.dataset.id);
        }
    }
    async function deleteChat(chatId, chatItem) { // –î–æ–±–∞–≤–ª–µ–Ω async
        console.log("Attempting to delete chat with ID:", chatId);
        try {
            const response = await fetch(`/api/chat_history/${chatId}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                console.log("Chat history removed from DB:", chatId);
            } else {
                console.error("Failed to delete chat history from DB:", await response.text());
            }
        } catch (error) {
            console.error("Network error deleting chat history from DB:", error);
        }
        localStorage.removeItem(chatId);
        console.log("Removed from localStorage:", chatId);
        if (chatId === currentChatId) {
            console.log("Deleted chat was current chat. Invalidating currentChatId temporarily.");
            currentChatId = null; // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º currentChatId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            const remainingChats = document.querySelectorAll('.chat-item');
            if (remainingChats.length > 1) {
                const firstChat = remainingChats[0];
                if (firstChat !== chatItem) {
                    const firstChatId = firstChat.dataset.id;
                    loadChat(firstChatId); // –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç currentChatId –≤ firstChatId
                    setActiveChatItem(firstChat);
                } else if (remainingChats[1]) {
                    const secondChatId = remainingChats[1].dataset.id;
                    loadChat(secondChatId); // –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç currentChatId –≤ secondChatId
                    setActiveChatItem(remainingChats[1]);
                }
            } else {
                createNewChat(); // –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç currentChatId –≤ –Ω–æ–≤—ã–π ID
            }
        }
        chatItem.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        chatItem.style.opacity = '0';
        chatItem.style.transform = 'translateX(-20px)';
        setTimeout(() => {
            if (chatItem.parentNode) {
                chatItem.parentNode.removeChild(chatItem);
            }
        }, 300);
    }
    function saveCurrentChat() {
        if (!currentChatId) {
            console.log("Skipping save: currentChatId is null (likely a deleted chat).");
            return;
        }
        const messages = Array.from(chatMessages.children).map(msg => {
            return {
                type: msg.classList.contains('user') ? 'user' : 'assistant',
                content: msg.querySelector('.message-content').innerHTML
            };
        });
        if (messages.length > 1) { 
            let existingChatData = localStorage.getItem(currentChatId);
            let chatData = {};
            if (existingChatData) {
                try {
                    chatData = JSON.parse(existingChatData);
                } catch (e) {
                    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:", e);
                    chatData = {};
                }
            }
            if (!chatData.createdAt) {
                chatData.createdAt = Date.now();
            }
            chatData.title = getChatTitle(currentChatId);
            chatData.messages = []; // –°–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤ localStorage
            chatData.updatedAt = Date.now();
            localStorage.setItem(currentChatId, JSON.stringify(chatData));
            console.log("Saved chat ID:", currentChatId, "with metadata only.");
        } else {
            console.log("Not saving chat ID:", currentChatId, "because it has 1 or fewer messages (only welcome).");
        }
    }
    function getChatTitle(chatId) {
        const chatItem = document.querySelector(`[data-id="${chatId}"]`);
        if (chatItem) {
            const titleSpan = chatItem.querySelector('.chat-title');
            return titleSpan ? titleSpan.textContent : '–ù–æ–≤—ã–π —á–∞—Ç';
        }
        // –ï—Å–ª–∏ chatItem –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
        const chatData = localStorage.getItem(chatId);
        if (chatData) {
            try {
                const parsed = JSON.parse(chatData);
                return parsed.title || '–ù–æ–≤—ã–π —á–∞—Ç';
            } catch (e) {
                console.error("Error parsing chat data for title:", e);
            }
        }
        return '–ù–æ–≤—ã–π —á–∞—Ç';
    }
    async function loadChat(chatId) { // –î–æ–±–∞–≤–ª–µ–Ω async
        saveCurrentChat(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ
        let messagesToLoad = [];
        let chatTitle = '–ù–æ–≤—ã–π —á–∞—Ç';
        const savedChatMetadata = localStorage.getItem(chatId);
        if (savedChatMetadata) {
            try {
                const data = JSON.parse(savedChatMetadata);
                if (data.title) {
                    chatTitle = data.title;
                }
            } catch (e) {
                console.error('Error parsing saved chat metadata:', e);
            }
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î —á–µ—Ä–µ–∑ API
        try {
            const response = await fetch(`/api/chat_history/${chatId}`);
            if (response.ok) {
                const data = await response.json();
                messagesToLoad = data.history || [];
                console.log(`Loaded ${messagesToLoad.length} messages from DB for chat ID: ${chatId}`);
            } else {
                console.error('Failed to load chat history from DB:', await response.text());
            }
        } catch (error) {
            console.error('Network error loading chat history from DB:', error);
        }
        chatMessages.innerHTML = ''; // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        chatHistory = []; // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        chatMessages.style.opacity = '0';
        setTimeout(() => {
            if (messagesToLoad.length === 0) {
                const welcomeMessage = `
                    <div class="message assistant">
                        <div class="message-content">
                                <p><strong>–ü—Ä–∏–≤–µ—Ç! –Ø –î–∂–µ–π–Ω ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.</strong></p>
                            
                            <p>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:</p>
                            <ul style="list-style-type: disc; padding-left: 20px; margin: 10px 0;">
                                <li style="margin-bottom: 5px;">üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏</li>
                                <li style="margin-bottom: 5px;">üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
                                <li style="margin-bottom: 5px;">‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤</li>
                                <li style="margin-bottom: 5px;">üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏</li>
                                <li style="margin-bottom: 5px;">üåê –ü–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</li>
                            </ul>
                    
                            <p>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üìé</p>
                        </div>
                    </div>
                `;
                chatMessages.innerHTML = welcomeMessage;
                chatHistory.push({
                    type: 'assistant',
                    content: welcomeMessage
                });
            } else {
                messagesToLoad.forEach(msg => {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `message ${msg.role === 'user' ? 'user' : 'assistant'}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º msg.role
                    const messageContent = document.createElement('div');
                    messageContent.className = 'message-content';
                    messageContent.innerHTML = msg.content;
                    messageDiv.appendChild(messageContent);
                    chatMessages.appendChild(messageDiv);
                    chatHistory.push({
                        type: msg.role, // –ò—Å–ø–æ–ª—å–∑—É–µ–º msg.role
                        content: msg.content
                    });
                });
            }
            chatMessages.style.opacity = '1';
            currentChatId = chatId;
            chatMessages.scrollTop = chatMessages.scrollHeight;
            const chatItem = document.querySelector(`[data-id="${chatId}"]`);
            if (chatItem) {
                const titleSpan = chatItem.querySelector('.chat-title');
                if (titleSpan && titleSpan.textContent === '–ù–æ–≤—ã–π —á–∞—Ç' && messagesToLoad.length > 0) {
                    titleSpan.textContent = chatTitle;
                    titleSpan.title = chatTitle;
                }
            }

        }, 150);
    }
    function addMessage(content, isUser = false, animate = true, isHTML = true) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        if (isHTML) {
            messageContent.innerHTML = content;
        } else {
            messageContent.innerHTML = content
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\n/g, '<br>');
        }
        messageDiv.appendChild(messageContent);
        if (animate) {
            messageDiv.style.opacity = '0';
            messageDiv.style.transform = 'translateY(20px)';
        }
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        if (animate) {
            setTimeout(() => {
                messageDiv.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                messageDiv.style.opacity = '1';
                messageDiv.style.transform = 'translateY(0)';
            }, 50);
        }
        chatHistory.push({
            type: isUser ? 'user' : 'assistant',
            content: messageContent.innerHTML 
        });
        if (isUser && chatHistory.filter(msg => msg.type === 'user').length === 1) {
            autoUpdateChatTitle(content);
        }
    }
    function autoUpdateChatTitle(firstMessage) {
        const chatItem = document.querySelector(`[data-id="${currentChatId}"]`);
        if (chatItem) {
            const titleSpan = chatItem.querySelector('.chat-title');
            if (titleSpan && titleSpan.textContent === '–ù–æ–≤—ã–π —á–∞—Ç') {
                let title = firstMessage.length > 30 
                    ? firstMessage.substring(0, 30) + '...' 
                    : firstMessage;
                titleSpan.textContent = title;
                titleSpan.title = title;
                saveChatTitle(currentChatId, title);
            }
        }
    }
    async function sendMessage() {
        const message = userInput.value.trim();
        if (!message && fileInput.files.length === 0) return;
        setInputState(false);
        if (message) {
            addMessage(message, true, true, false);
        }
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const fileMessage = `üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: ${file.name}`;
            addMessage(fileMessage, true, true, false);
        }
        userInput.value = '';
        const typingDiv = createTypingIndicator();
        chatMessages.appendChild(typingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        try {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', message);
        
            let requestOptions = {
                method: 'POST'
            };
            if (fileInput.files.length > 0) {
                const formData = new FormData();
                formData.append('file', fileInput.files[0]);
                formData.append('message', message || '');
                formData.append('chat_id', currentChatId); // –ü–µ—Ä–µ–¥–∞–µ–º chat_id
                requestOptions.body = formData;
            } else {
                requestOptions.headers = {
                    'Content-Type': 'application/json',
                };
                requestOptions.body = JSON.stringify({ message, chat_id: currentChatId }); // –ü–µ—Ä–µ–¥–∞–µ–º chat_id
            }
            const response = await fetch('/api/chat', requestOptions);
            console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response);
            const data = await response.json();
            console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            if (typingDiv.parentNode) {
                typingDiv.style.opacity = '0';
                setTimeout(() => {
                    if (typingDiv.parentNode) {
                        chatMessages.removeChild(typingDiv);
                    }
                }, 200);
            }
            if (data.response) {
                addMessage(data.response, false, true, true);
                saveCurrentChat();
                const responseText = data.response.toLowerCase();
                if (responseText.includes('–∑–∞–¥–∞—á–∞') && 
                    (responseText.includes('–¥–æ–±–∞–≤–ª–µ–Ω–∞') || 
                    responseText.includes('—É–¥–∞–ª–µ–Ω–∞') || 
                    responseText.includes('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') || 
                    responseText.includes('–æ—Ç–º–µ—á–µ–Ω–∞'))) {
                    setTimeout(() => {
                        fetchAndRenderTodos();
                    }, 100);
                }
            } else if (data.error) {
                if (data.error.includes ('timeout')) {
                addMessage("–û–π, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", false, true, false);
            } else {
                addMessage(`–û—à–∏–±–∫–∞: ${data.error}`, false, true, false);
            }
        }
            if (fileInput.files.length > 0) {
                fileInput.value = '';
                resetAttachButton();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        
            if (typingDiv.parentNode) {
                chatMessages.removeChild(typingDiv);
            }

            if (error.message && error.message.includes("timed out")) {
                addMessage("–û–π, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", false, true, false);
            } else {
                addMessage(`–û—à–∏–±–∫–∞: ${error.message}`, false, true, false);
            }
        } finally {
            setInputState(true);
        }
    }
    function createTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message assistant typing-message';
        typingDiv.innerHTML = `
            <div class="message-content" style="display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 48px;">
                <div class="typing-indicator" style="margin: 0 auto;">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div style="margin-top: 8px; font-size: 12px; color: #7fa7e2; letter-spacing: 0.5px; opacity: 0.8; text-align: center; animation: fadeIn 1s;">
                    –î–∂–µ–π–Ω –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç...
                </div>
            </div>
        `;
        typingDiv.style.opacity = '0';
        typingDiv.style.transform = 'translateY(20px)';
        setTimeout(() => {
            typingDiv.style.transition = 'opacity 0.4s, transform 0.4s';
            typingDiv.style.opacity = '1';
            typingDiv.style.transform = 'translateY(0)';
        }, 10);
        return typingDiv;
    }
    function setInputState(enabled) {
        userInput.disabled = !enabled;
        sendButton.disabled = !enabled;
        attachButton.disabled = !enabled;
        
        if (enabled) {
            userInput.focus();
        }
    }
    fileInput.addEventListener('change', function() {
        isFileDialogOpen = false; 
        if (fileInput.files.length > 0) {
            const fileName = fileInput.files[0].name;
            const fileSize = (fileInput.files[0].size / 1024 / 1024).toFixed(2);
            attachButton.innerHTML = `
                <div class="file-info">
                    <span class="file-name">${fileName.length > 15 ? fileName.substring(0, 15) + '...' : fileName}</span>
                    <span class="file-size">${fileSize}MB</span>
                </div>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            `;
            attachButton.classList.add('file-selected');
            attachButton.title = `–§–∞–π–ª: ${fileName} (${fileSize}MB) - –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã`;
        }
    });
    function resetAttachButton() {
        attachButton.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21.44 11.05L12.25 20.24C11.1242 21.3658 9.59723 21.9983 8.005 21.9983C6.41277 21.9983 4.88584 21.3658 3.76 20.24C2.63416 19.1142 2.00166 17.5872 2.00166 15.995C2.00166 14.4028 2.63416 12.8758 3.76 11.75L12.33 3.18C13.0806 2.42975 14.0991 2.00129 15.16 2.00129C16.2209 2.00129 17.2394 2.42975 17.99 3.18C18.7403 3.93063 19.1687 4.94905 19.1687 5.995C19.1687 7.04095 18.7403 8.05937 17.99 8.81L9.41 17.39C9.03472 17.7653 8.52573 17.9788 7.995 17.9788C7.46427 17.9788 6.95528 17.7653 6.58 17.39C6.20472 17.0147 5.99122 16.5057 5.99122 15.975C5.99122 15.4443 6.20472 14.9353 6.58 14.56L14.54 6.6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        `;
        attachButton.classList.remove('file-selected');
        attachButton.title = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª';
    }
    attachButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
    
        if (isFileDialogOpen) {
            return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
        }
    
        if (attachButton.classList.contains('file-selected')) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
            fileInput.value = '';
            resetAttachButton();
        } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            isFileDialogOpen = true;
            fileInput.click();
            setTimeout(() => {
                if (fileInput.files.length === 0) {
                    isFileDialogOpen = false;
                }
            }, 1000);
        }
    });
    fileInput.addEventListener('cancel', function() {
        isFileDialogOpen = false;
    });
    function loadSavedChats() {
    const savedChats = Object.keys(localStorage)
        .filter(key => key.startsWith('chat-'))
        .map(key => {
            try {
                const data = localStorage.getItem(key);
                const parsed = JSON.parse(data);
                
                if (parsed.createdAt) {
                    return {
                        id: key,
                        title: parsed.title || '–ù–æ–≤—ã–π —á–∞—Ç',
                        createdAt: parsed.createdAt
                    };
                } else {
                    const timestamp = parseInt(key.replace('chat-', ''));
                    return {
                        id: key,
                        title: '–ù–æ–≤—ã–π —á–∞—Ç',
                        createdAt: timestamp || Date.now()
                    };
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞:', key, e);
                return null;
            }
        })
        .filter(chat => chat !== null)
        .sort((a, b) => b.createdAt - a.createdAt); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

    savedChats.forEach(chat => {
        addChatToSidebar(chat.id, chat.title);
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ id –∏–∑ localStorage
    const activeId = localStorage.getItem('activeChatId');
    let chatToActivate = null;
    if (activeId) {
        chatToActivate = document.querySelector('.chat-item[data-id="' + activeId + '"]');
        if (!chatToActivate) {
            localStorage.removeItem('activeChatId');
        }
    }
    if (!chatToActivate && savedChats.length > 0) {
        chatToActivate = document.querySelector('.chat-item');
    }
    if (chatToActivate) {
        setActiveChatItem(chatToActivate);
        loadChat(chatToActivate.dataset.id);
    } else {
        createNewChat();
    }
}
function initApp() {
    fetchAndRenderTodos();
    loadSavedChats();
    userInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    sendButton.addEventListener('click', sendMessage);
    addTodoBtn.addEventListener('click', async function() {
        const todoText = newTodoInput.value.trim();
        if (todoText) {
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: `–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É ${todoText}` }),
                });
                const data = await response.json();
                
                if (data.response) {
                    newTodoInput.value = '';
                    setTimeout(() => {
                        fetchAndRenderTodos();
                    }, 100);;
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', data.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
            }
        }
    });
    newTodoInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            addTodoBtn.click();
        }
    });
    todoList.addEventListener('mouseover', function(e) {
        const listItem = e.target.closest('li');
        if (listItem) {
            const deleteBtn = listItem.querySelector('.delete-todo-btn');
            if (deleteBtn) {
                deleteBtn.style.opacity = '1';
                deleteBtn.style.pointerEvents = 'auto';
            }
        }
    });
    todoList.addEventListener('mouseout', function(e) {
        const listItem = e.target.closest('li');
        if (listItem) {
            const deleteBtn = listItem.querySelector('.delete-todo-btn');
            if (deleteBtn) {
                deleteBtn.style.opacity = '0';
                deleteBtn.style.pointerEvents = 'none';
            }
        }
    });
    document.querySelectorAll('.chat-item').forEach(item => {
        item.addEventListener('touchstart', function() {
            const actions = this.querySelector('.chat-actions');
            if (actions) {
                actions.style.opacity = '1';
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    chatMessages.addEventListener('dragover', function(e) {
        e.preventDefault();
        chatMessages.classList.add('drag-over');
    });
    
    chatMessages.addEventListener('dragleave', function() {
        chatMessages.classList.remove('drag-over');
    });
    
    chatMessages.addEventListener('drop', function(e) {
        e.preventDefault();
        chatMessages.classList.remove('drag-over');
        
        if (e.dataTransfer.files.length > 0) {
            fileInput.files = e.dataTransfer.files;
            const event = new Event('change');
            fileInput.dispatchEvent(event);
        }
    });

    function adjustChatWidth() {
        if (sidebar.classList.contains('hidden')) {
            chatContainer.style.width = '100%';
        } else {
            chatContainer.style.width = '';
        }
    }

    adjustChatWidth();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    saveCurrentChat();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML)
window.createNewChat = createNewChat;
});

